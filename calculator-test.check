/* 
Roman calculator: performs addition and subtraction of roman values
Author: Vinay vittal Karagod
File dependents: main.c, calculator.h, calculator.c,calculator-test.check
Date: 09/07/2016
calculator-test.check: Test file used to pass the input values to calculate roman numbers.
*/

# include "calculator.h"
# include "roman_decimal.h"
# include "decimal_roman.h"
# include "error.h"
char buffer[50];

#test roman_digit_to_decimal

/* checking the conditions for the single roman value*/
ck_assert_msg(roman_to_decimal_digit_value('I') == 1,"operation failed for I");
ck_assert_msg(roman_to_decimal_digit_value('V') == 5,"operation failed for V");
ck_assert_msg(roman_to_decimal_digit_value('X') == 10,"operation failed for X");
ck_assert_msg(roman_to_decimal_digit_value('L') == 50,"operation failed for L");
ck_assert_msg(roman_to_decimal_digit_value('C') == 100,"operation failed for C");
ck_assert_msg(roman_to_decimal_digit_value('D') == 500,"operation failed for D");
ck_assert_msg(roman_to_decimal_digit_value('M') == 1000,"operation failed for M");

#test invalid_roman_digit
ck_assert_msg(roman_to_decimal_digit_value('\0') == 0,"operation failed for end of line");
ck_assert_msg(roman_to_decimal_digit_value('K') == -1,"operation failed for passing wrong input");

#test roman_string_to_decimal
/*condition to check the string of roman numbers*/
ck_assert_msg(roman_string_to_decimal_value("MD") == 1500,"operation failed to convert roman to decimal");
ck_assert_msg(roman_string_to_decimal_value("MM") == 2000,"operation failed to convert roman to decimal");

#test invalid_roman_string
ck_assert_msg(roman_string_to_decimal_value("DM") == 1500,"wrong format to pass the roman value");

#test decimal_to_roman_string
/*condition to convert back from decimal to roman number*/
ck_assert_msg(strcmp(decimal_number_to_roman_string(1000,buffer),"M") == 0,"Operation failed to convert decimal to roman");
ck_assert_msg(strcmp(decimal_number_to_roman_string(1500,buffer),"MD") == 0,"Operation failed to convert decimal to roman");
ck_assert_msg(strcmp(decimal_number_to_roman_string(1900,buffer),"MCM") == 0,"Operation failed to convert decimal to roman");
ck_assert_msg(strcmp(decimal_number_to_roman_string(150,buffer),"CL") == 0,"Operation failed to convert decimal to roman");
ck_assert_msg(strcmp(decimal_number_to_roman_string(15,buffer),"XV") == 0,"Operation failed to convert decimal to roman");
ck_assert_msg(strcmp(decimal_number_to_roman_string(4,buffer),"IV") == 0,"Operation failed to convert decimal to roman");

/*condition to perform addition and subtraction operation of roman numbers*/
#test roman_addition
ck_assert_msg(strcmp(calculate_roman_numbers("M","D","ADD",buffer),"MD") == 0,"Operation failed to return the roman value");
ck_assert_msg(strcmp(calculate_roman_numbers("M","D","add",buffer),"MD") == 0,"Operation failed to return the roman value");

#test roman_subtraction
ck_assert_msg(strcmp(calculate_roman_numbers("MMMMD","D","SUBTRACT",buffer),"MMMM") == 0,"Operation failed to return the roman value");
ck_assert_msg(strcmp(calculate_roman_numbers("M","D","subtract",buffer),"D") == 0,"Operation failed to return the roman value");

#test invalid_operation
ck_assert_msg(strcmp(calculate_roman_numbers("M","D","XXX",buffer),"0") != 0,"Passed invalid option");

#test limit_exceeded
ck_assert_msg(strcmp(calculate_roman_numbers("MM","MM","ADD",buffer),"0") != 0,"limit exceeds maximum value");

